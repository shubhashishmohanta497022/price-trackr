import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useState } from 'react';
import { Palette, Bell, Shield, Database, Wifi, Globe, Info, HelpCircle } from 'lucide-react';
import { Switch } from "@/components/shared/Switch"; // A custom Switch component
import { Button } from "@/components/shared/Button"; // A custom Button component
import clsx from 'clsx';
// In a real app, this would come from a state management store like Zustand or Context
// e.g., import { useSettingsStore } from '@/stores/settingsStore';
const useSettingsStore = () => {
    const [settings, setSettings] = useState({
        theme: 'dark',
        compactMode: false,
        pushNotifications: true,
        priceDropAlerts: true,
        saleNotifications: true,
        priceDropThreshold: 10,
        scamDetection: true,
        anonymousTracking: false,
        dataRetention: 30,
        offlineMode: true,
        realtimeUpdates: true,
        currency: 'INR',
        timeZone: 'IST',
    });
    const updateSetting = (key, value) => setSettings(prev => ({ ...prev, [key]: value }));
    return { settings, updateSetting };
};
// --- Reusable Child Components (would be in '@/components/settings/') ---
const SettingsSection = ({ icon, title, description, children }) => (_jsxs("div", { className: "bg-brand-surface rounded-lg", children: [_jsx("div", { className: "p-6 border-b border-brand-secondary", children: _jsxs("div", { className: "flex items-center gap-4", children: [icon, _jsxs("div", { children: [_jsx("h2", { className: "text-xl font-semibold text-brand-text", children: title }), _jsx("p", { className: "text-sm text-brand-text-muted", children: description })] })] }) }), _jsx("div", { className: "p-6 space-y-6", children: children })] }));
const SettingRow = ({ title, description, children, tooltip }) => (_jsxs("div", { className: "flex flex-col sm:flex-row justify-between sm:items-center", children: [_jsxs("div", { children: [_jsxs("h3", { className: "text-brand-text font-medium flex items-center gap-2", children: [title, tooltip && (_jsxs("div", { className: "group relative", children: [_jsx(HelpCircle, { size: 16, className: "text-brand-text-muted cursor-pointer" }), _jsx("div", { className: "absolute bottom-full mb-2 w-64 bg-brand-dark text-brand-text-muted text-xs rounded-md p-2 opacity-0 group-hover:opacity-100 transition-opacity pointer-events-none", children: tooltip })] }))] }), _jsx("p", { className: "text-sm text-brand-text-muted", children: description })] }), _jsx("div", { className: "mt-2 sm:mt-0 flex-shrink-0", children: children })] }));
// --- Main Settings Page Component ---
const Settings = () => {
    const { settings, updateSetting } = useSettingsStore();
    return (_jsxs("div", { className: "p-6 md:p-8 space-y-8 max-w-4xl mx-auto", children: [_jsxs("div", { children: [_jsx("h1", { className: "text-3xl font-bold text-brand-text", children: "Settings" }), _jsx("p", { className: "text-brand-text-muted", children: "Configure your price tracking preferences and notifications." })] }), _jsxs(SettingsSection, { icon: _jsx(Palette, { className: "text-brand-primary" }), title: "Appearance", description: "Customize the look and feel of the application.", children: [_jsx(SettingRow, { title: "Theme", description: "Choose your preferred theme.", children: _jsxs("div", { className: "flex gap-2 rounded-md bg-brand-dark p-1", children: [_jsx("button", { onClick: () => updateSetting('theme', 'light'), className: clsx("px-4 py-1 rounded text-sm font-semibold", settings.theme === 'light' ? 'bg-brand-surface text-brand-text' : 'text-brand-text-muted'), children: "Light" }), _jsx("button", { onClick: () => updateSetting('theme', 'dark'), className: clsx("px-4 py-1 rounded text-sm font-semibold", settings.theme === 'dark' ? 'bg-brand-surface text-brand-text' : 'text-brand-text-muted'), children: "Dark" })] }) }), _jsx(SettingRow, { title: "Compact Mode", description: "Reduce padding to show more on screen.", children: _jsx(Switch, { checked: settings.compactMode, onCheckedChange: (val) => updateSetting('compactMode', val) }) })] }), _jsxs(SettingsSection, { icon: _jsx(Bell, { className: "text-brand-primary" }), title: "Notifications", description: "Manage how you receive price alerts.", children: [_jsx(SettingRow, { title: "Push Notifications", description: "Receive browser notifications.", children: _jsx(Switch, { checked: settings.pushNotifications, onCheckedChange: (val) => updateSetting('pushNotifications', val) }) }), _jsx(SettingRow, { title: "Price Drop Alerts", description: "Notify me when price drops below threshold.", children: _jsx(Switch, { checked: settings.priceDropAlerts, onCheckedChange: (val) => updateSetting('priceDropAlerts', val) }) }), _jsx(SettingRow, { title: "Sale Notifications", description: "Notify about upcoming major sales.", children: _jsx(Switch, { checked: settings.saleNotifications, onCheckedChange: (val) => updateSetting('saleNotifications', val) }) }), _jsx(SettingRow, { title: "Price Drop Threshold (%)", description: "Notify when price drops by this percentage.", children: _jsxs("div", { className: 'flex items-center gap-4 w-full max-w-xs', children: [_jsx("input", { type: "range", min: "1", max: "50", value: settings.priceDropThreshold, onChange: e => updateSetting('priceDropThreshold', parseInt(e.target.value)), className: "w-full h-2 bg-brand-secondary rounded-lg appearance-none cursor-pointer" }), _jsxs("span", { className: 'font-mono bg-brand-dark text-brand-text-muted px-3 py-1 rounded-md text-sm', children: [settings.priceDropThreshold, "%"] })] }) })] }), _jsxs(SettingsSection, { icon: _jsx(Shield, { className: "text-brand-primary" }), title: "Privacy & Security", description: "Control your data and security settings.", children: [_jsx(SettingRow, { title: "Scam Detection", description: "Warn about potential scam or low-trust sites.", tooltip: "Analyzes domain age and other signals to flag suspicious websites.", children: _jsx(Switch, { checked: settings.scamDetection, onCheckedChange: (val) => updateSetting('scamDetection', val) }) }), _jsx(SettingRow, { title: "Anonymous Tracking", description: "Allow collection of anonymous usage data.", tooltip: "Helps us improve the app by understanding feature usage. No personal data is ever collected.", children: _jsx(Switch, { checked: settings.anonymousTracking, onCheckedChange: (val) => updateSetting('anonymousTracking', val) }) }), _jsx(SettingRow, { title: "Data Retention", description: "How long to keep price history data.", children: _jsxs("select", { value: settings.dataRetention, onChange: e => updateSetting('dataRetention', parseInt(e.target.value)), className: "bg-brand-dark border border-brand-secondary rounded-md px-3 py-1.5 text-brand-text focus:ring-2 focus:ring-brand-primary focus:outline-none", children: [_jsx("option", { value: 30, children: "30 Days" }), _jsx("option", { value: 90, children: "90 Days" }), _jsx("option", { value: 365, children: "1 Year" }), _jsx("option", { value: -1, children: "Forever" })] }) })] }), _jsxs(SettingsSection, { icon: _jsx(Database, { className: "text-brand-primary" }), title: "Data & Sync", description: "Manage application data and connectivity.", children: [_jsx(SettingRow, { title: "Offline Mode", description: "Enable or disable offline data access.", children: _jsx(Switch, { checked: settings.offlineMode, onCheckedChange: (val) => updateSetting('offlineMode', val) }) }), _jsx(SettingRow, { title: "Real-time Updates", description: "Get live price updates via WebSockets.", children: _jsx(Switch, { checked: settings.realtimeUpdates, onCheckedChange: (val) => updateSetting('realtimeUpdates', val) }) })] }), _jsxs(SettingsSection, { icon: _jsx(Globe, { className: "text-brand-primary" }), title: "Localization", description: "Set your language and region.", children: [_jsx(SettingRow, { title: "Currency", description: "Default currency for displaying prices.", children: _jsxs("select", { value: settings.currency, onChange: e => updateSetting('currency', e.target.value), className: "bg-brand-dark border border-brand-secondary rounded-md px-3 py-1.5 text-brand-text focus:ring-2 focus:ring-brand-primary focus:outline-none", children: [_jsx("option", { value: "INR", children: "INR (Indian Rupee)" }), _jsx("option", { value: "USD", children: "USD (US Dollar)" })] }) }), _jsx(SettingRow, { title: "Time Zone", description: "Time zone for notifications and charts.", children: _jsxs("select", { value: settings.timeZone, onChange: e => updateSetting('timeZone', e.target.value), className: "bg-brand-dark border border-brand-secondary rounded-md px-3 py-1.5 text-brand-text focus:ring-2 focus:ring-brand-primary focus:outline-none", children: [_jsx("option", { value: "IST", children: "IST (India Standard Time)" }), _jsx("option", { value: "UTC", children: "UTC" })] }) })] }), _jsxs("div", { className: "flex justify-end gap-4 pt-4 border-t border-brand-secondary", children: [_jsx(Button, { variant: "secondary", children: "Revert to Default" }), _jsx(Button, { children: "Save Settings" })] })] }));
};
export default Settings;
//# sourceMappingURL=Settings.js.map