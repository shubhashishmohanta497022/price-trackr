from pydantic import BaseModel
from datetime import datetime
from typing import Optional

class PriceLogBase(BaseModel):
    """
    The base schema for a price log entry.
    Contains the core information scraped from a product page.
    """
    price_cents: int
    currency: str
    availability: Optional[str] = None

class PriceLogCreate(PriceLogBase):
    """
    Schema used when creating a new price log entry in the database.
    It's identical to the base schema in this case, as all fields are
    required for creation. The associated product_id will be handled
    by the CRUD logic, not passed directly in this schema.
    """
    pass

class PriceLog(PriceLogBase):
    """
    The schema for reading/returning a price log entry from the API.
    This includes fields that are automatically generated by the database,
    such as the `id` and `scraped_at` timestamp.
    """
    id: int
    product_id: int
    scraped_at: datetime

    # Pydantic's configuration class to specify model behavior.
    # `from_attributes = True` allows Pydantic to read data from ORM models
    # (like our SQLAlchemy PriceLog model) by attribute access, not just dict keys.
    class Config:
        from_attributes = True
