# --- Upstream Definitions ---
# These blocks define groups of servers that Nginx can proxy requests to.
# In our Docker setup, each 'server' is a container accessible by its service name.

# The 'frontend' upstream points to the container running our React application.
# For production, this would be an Nginx container serving the static build files.
upstream frontend {
    server frontend:80;
}

# The 'backend' upstream points to the container running our FastAPI API.
upstream backend {
    server backend:8000;
}

# The 'websocket' upstream also points to the FastAPI container, as it handles
# both HTTP and WebSocket connections on the same port.
upstream websocket {
    server backend:8000;
}


# --- HTTP Server: Port 80 ---
# This server block handles all initial insecure traffic on port 80.
# Its primary jobs are to handle Let's Encrypt/Certbot challenges and
# to redirect all other traffic to the secure HTTPS version.
server {
    listen 80;
    # IMPORTANT: Replace all instances of 'example.com' with your actual domain name.
    server_name example.com api.example.com ws.example.com;

    # This location block is crucial for Certbot. It allows the Let's Encrypt
    # service to verify that you control the domain by placing a file here.
    location /.well-known/acme-challenge/ {
        root /var/www/certbot;
    }

    # For all other requests on port 80, issue a permanent redirect (301)
    # to the corresponding HTTPS URL.
    location / {
        return 301 https://$host$request_uri;
    }
}


# --- HTTPS Server: Frontend ---
server {
    listen 443 ssl http2;
    server_name example.com;

    # --- SSL Configuration (Uncomment after running Certbot) ---
    # ssl_certificate /etc/letsencrypt/live/example.com/fullchain.pem;
    # ssl_certificate_key /etc/letsencrypt/live/example.com/privkey.pem;
    # include /etc/letsencrypt/options-ssl-nginx.conf;
    # ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;

    location / {
        # Proxy all requests to the 'frontend' upstream defined above.
        proxy_pass http://frontend;
        # These headers are important for passing information about the original
        # request (like the client's IP address) to the proxied application.
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}


# --- HTTPS Server: Backend API ---
server {
    listen 443 ssl http2;
    server_name api.example.com;

    # --- SSL Configuration (Uncomment after running Certbot) ---
    # ssl_certificate /etc/letsencrypt/live/example.com/fullchain.pem;
    # ssl_certificate_key /etc/letsencrypt/live/example.com/privkey.pem;

    location / {
        proxy_pass http://backend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
    }
}


# --- HTTPS Server: WebSocket ---
server {
    listen 443 ssl http2;
    server_name ws.example.com;

    # --- SSL Configuration (Uncomment after running Certbot) ---
    # ssl_certificate /etc/letsencrypt/live/example.com/fullchain.pem;
    # ssl_certificate_key /etc/letsencrypt/live/example.com/privkey.pem;

    location / {
        proxy_pass http://websocket;
        # These specific headers are required to correctly "upgrade" the
        # standard HTTP connection to a persistent WebSocket connection.
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
    }
}

