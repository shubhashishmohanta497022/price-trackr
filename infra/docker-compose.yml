# Specifies the version of the Docker Compose file format. Version 3.9 is a modern, stable choice.
version: '3.9'

# The 'services' key is where we define all the containers that make up our application.
services:
  # --- Database Service ---
  db:
    image: postgres:15-alpine
    container_name: price-trackr_db
    # The 'volumes' section persists data. This line maps the named volume 'postgres_data'
    # to the directory inside the container where PostgreSQL stores its data.
    # This ensures your data survives container restarts.
    volumes:
      - postgres_data:/var/lib/postgresql/data
    # The 'env_file' directive tells Docker Compose to load environment variables
    # from the specified file at the root of the project.
    env_file:
      - ../.env
    restart: unless-stopped
    # The 'healthcheck' tells Docker how to determine if the database is ready to accept connections.
    # Other services can use 'depends_on' with a 'service_healthy' condition to wait for the DB.
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - internal_net

  # --- Cache & Queue Service ---
  redis:
    image: redis:7-alpine
    container_name: price-trackr_redis
    # This command starts the Redis server and requires a password for connection,
    # which is loaded from the .env file.
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - internal_net

  # --- Backend API Service ---
  backend:
    build:
      context: ../backend
    container_name: price-trackr_backend
    env_file:
      - ../.env
    # This command starts the Uvicorn server, making the FastAPI app available.
    # '--reload' enables hot-reloading for development.
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
    volumes:
      - ../backend:/usr/src/app
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - internal_net

  # --- Scraper Worker Service ---
  worker:
    build:
      context: ../worker
    container_name: price-trackr_worker
    env_file:
      - ../.env
    # The worker needs access to the backend's code to import database models and CRUD functions.
    # This is a key step that links the two services.
    volumes:
      - ../worker:/usr/src/app
      - ../backend:/usr/src/backend
    depends_on:
      redis:
        condition: service_healthy
      db:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - internal_net

  # --- Frontend Service (served via Nginx) ---
  # Note: In this setup, we don't run the Vite dev server directly.
  # Instead, we rely on Nginx to serve the static files after building,
  # or to proxy to the dev server if needed for development.
  frontend:
    build:
      context: ../frontend
    container_name: price-trackr_frontend
    # For development with hot-reloading, mount the source code.
    volumes:
      - ../frontend:/app
      # This prevents the container's node_modules from being overwritten by a local one.
      - /app/node_modules
    networks:
      - internal_net

  # --- Reverse Proxy Service ---
  nginx:
    image: nginx:1.25-alpine
    container_name: price-trackr_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      # Mount the custom Nginx configuration.
      - ./nginx/site.conf:/etc/nginx/conf.d/default.conf
      # Mount volumes for Certbot to handle SSL certificates.
      - ./certs:/etc/letsencrypt
      - ./certs-www:/var/www/certbot
    depends_on:
      - backend
      - frontend
    restart: unless-stopped
    networks:
      - internal_net

  # --- SSL Certificate Service ---
  certbot:
    image: certbot/certbot
    container_name: price-trackr_certbot
    volumes:
      - ./certs:/etc/letsencrypt
      - ./certs-www:/var/www/certbot
    # This entrypoint command will attempt to renew the certificate every 12 hours.
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"

# Define named volumes for persistent storage.
volumes:
  postgres_data:
  redis_data:

# Define a custom bridge network for internal communication between services.
# This allows containers to resolve each other by their service name (e.g., 'db', 'redis').
networks:
  internal_net:
    driver: bridge

